// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function rollOnce(dice) {
  return Belt_List.head(Belt_List.shuffle(dice));
}

function roll(times, dice) {
  if (times <= 0) {
    return /* [] */0;
  }
  var face = Belt_List.head(Belt_List.shuffle(dice));
  if (face !== undefined) {
    return Belt_List.add(roll(times - 1 | 0, dice), Caml_option.valFromOption(face));
  } else {
    return /* [] */0;
  }
}

function count(roll, face) {
  return Belt_List.reduce(roll, 0, (function (c, f) {
                if (Caml_obj.caml_equal(f, face)) {
                  return c + 1 | 0;
                } else {
                  return c;
                }
              }));
}

function cancel(param, face) {
  return Belt_List.reduceReverse(param[0], [
              /* [] */0,
              param[1]
            ], (function (param, f) {
                var sc = param[1];
                var r = param[0];
                if (sc <= 0) {
                  return [
                          Belt_List.add(r, f),
                          0
                        ];
                } else if (Caml_obj.caml_equal(f, face)) {
                  return [
                          r,
                          sc - 1 | 0
                        ];
                } else {
                  return [
                          Belt_List.add(r, f),
                          sc
                        ];
                }
              }));
}

function fight(attack, defense) {
  var match = cancel(cancel(cancel([
                attack,
                count(defense, /* Shield */3)
              ], /* Kill */0), /* Disrupt */1), /* Push */2);
  return Belt_List.keep(Belt_List.keep(match[0], (function (face) {
                    return face !== /* Shield */3;
                  })), (function (face) {
                return face !== /* Blank */4;
              }));
}

function toString(roll) {
  return $$Array.of_list(Belt_List.map(roll, (function (face) {
                    switch (face) {
                      case /* Kill */0 :
                          return "Kill";
                      case /* Disrupt */1 :
                          return "Disrupt";
                      case /* Push */2 :
                          return "Push";
                      case /* Shield */3 :
                          return "Shield";
                      case /* Blank */4 :
                          return "Blank";
                      case /* Trample */5 :
                          return "Trample";
                      case /* Death */6 :
                          return "Death";
                      case /* Rally */7 :
                          return "Rally";
                      case /* DelayedRally */8 :
                          return "Delayed Rally";
                      
                    }
                  })));
}

var toArray = $$Array.of_list;

var blackDice = {
  hd: /* Kill */0,
  tl: {
    hd: /* Disrupt */1,
    tl: {
      hd: /* Disrupt */1,
      tl: {
        hd: /* Shield */3,
        tl: {
          hd: /* Shield */3,
          tl: {
            hd: /* Shield */3,
            tl: /* [] */0
          }
        }
      }
    }
  }
};

var redDice = {
  hd: /* Kill */0,
  tl: {
    hd: /* Kill */0,
    tl: {
      hd: /* Disrupt */1,
      tl: {
        hd: /* Disrupt */1,
        tl: {
          hd: /* Push */2,
          tl: {
            hd: /* Shield */3,
            tl: /* [] */0
          }
        }
      }
    }
  }
};

var yellowDice = {
  hd: /* Disrupt */1,
  tl: {
    hd: /* Push */2,
    tl: {
      hd: /* Push */2,
      tl: {
        hd: /* Shield */3,
        tl: {
          hd: /* Blank */4,
          tl: {
            hd: /* Blank */4,
            tl: /* [] */0
          }
        }
      }
    }
  }
};

var whiteDice = {
  hd: /* Disrupt */1,
  tl: {
    hd: /* Disrupt */1,
    tl: {
      hd: /* Push */2,
      tl: {
        hd: /* Shield */3,
        tl: {
          hd: /* Shield */3,
          tl: {
            hd: /* Blank */4,
            tl: /* [] */0
          }
        }
      }
    }
  }
};

var giganticDice = {
  hd: /* Kill */0,
  tl: {
    hd: /* Disrupt */1,
    tl: {
      hd: /* Disrupt */1,
      tl: {
        hd: /* Push */2,
        tl: {
          hd: /* Trample */5,
          tl: {
            hd: /* Trample */5,
            tl: /* [] */0
          }
        }
      }
    }
  }
};

var doomDice = {
  hd: /* Disrupt */1,
  tl: {
    hd: /* Death */6,
    tl: {
      hd: /* Death */6,
      tl: {
        hd: /* Rally */7,
        tl: {
          hd: /* Rally */7,
          tl: {
            hd: /* DelayedRally */8,
            tl: /* [] */0
          }
        }
      }
    }
  }
};

exports.toArray = toArray;
exports.blackDice = blackDice;
exports.redDice = redDice;
exports.yellowDice = yellowDice;
exports.whiteDice = whiteDice;
exports.giganticDice = giganticDice;
exports.doomDice = doomDice;
exports.rollOnce = rollOnce;
exports.roll = roll;
exports.count = count;
exports.cancel = cancel;
exports.fight = fight;
exports.toString = toString;
/* No side effect */
