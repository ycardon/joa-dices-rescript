// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Dices$JoaDicesRescript = require("./Dices.bs.js");

function parseCLI(command) {
  var attack = {
    contents: /* [] */0
  };
  var defense = {
    contents: /* [] */0
  };
  var isDefense = {
    contents: false
  };
  var addDice = function (times, dice) {
    if (isDefense.contents) {
      defense.contents = Belt_List.concat(defense.contents, Dices$JoaDicesRescript.roll(times, dice));
    } else {
      attack.contents = Belt_List.concat(attack.contents, Dices$JoaDicesRescript.roll(times, dice));
    }
    
  };
  Belt_Array.forEach(command, (function (arg) {
          var $$int = Belt_Int.fromString(arg.slice(0, -1));
          var times = $$int !== undefined ? $$int : 1;
          var error = arg.slice(-1).toUpperCase();
          switch (error) {
            case "-" :
            case "/" :
            case ":" :
                isDefense.contents = true;
                return ;
            case "D" :
                return addDice(times, Dices$JoaDicesRescript.doomDice);
            case "G" :
                return addDice(times, Dices$JoaDicesRescript.giganticDice);
            case "N" :
                return addDice(times, Dices$JoaDicesRescript.blackDice);
            case "R" :
                return addDice(times, Dices$JoaDicesRescript.redDice);
            case "B" :
            case "W" :
                return addDice(times, Dices$JoaDicesRescript.whiteDice);
            case "J" :
            case "Y" :
                return addDice(times, Dices$JoaDicesRescript.yellowDice);
            default:
              console.log(error, "is invalid, example: 3R W - 2Y");
              return ;
          }
        }));
  console.log({
        attack: Dices$JoaDicesRescript.toString(attack.contents),
        defense: Dices$JoaDicesRescript.toString(defense.contents),
        result: Dices$JoaDicesRescript.toString(Dices$JoaDicesRescript.fight(attack.contents, defense.contents))
      });
  
}

parseCLI([
      "3W",
      "3R",
      "-",
      "B"
    ]);

var frenchSyntax = true;

exports.frenchSyntax = frenchSyntax;
exports.parseCLI = parseCLI;
/*  Not a pure module */
